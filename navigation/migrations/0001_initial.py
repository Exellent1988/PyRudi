# Generated by Django 5.2.5 on 2025-08-25 13:31

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0001_initial"),
        ("events", "0001_initial"),
        ("optimization", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("street", models.CharField(max_length=200, verbose_name="Straße")),
                (
                    "house_number",
                    models.CharField(max_length=10, verbose_name="Hausnummer"),
                ),
                (
                    "postal_code",
                    models.CharField(max_length=10, verbose_name="Postleitzahl"),
                ),
                ("city", models.CharField(max_length=100, verbose_name="Stadt")),
                (
                    "country",
                    models.CharField(
                        default="Deutschland", max_length=100, verbose_name="Land"
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        max_digits=10,
                        null=True,
                        verbose_name="Breitengrad",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        max_digits=11,
                        null=True,
                        verbose_name="Längengrad",
                    ),
                ),
                (
                    "geocoding_confidence",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Vertrauenswert des Geocoding-Ergebnisses (0.0-1.0)",
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0")),
                            django.core.validators.MaxValueValidator(Decimal("1.0")),
                        ],
                        verbose_name="Geocoding-Konfidenz",
                    ),
                ),
                (
                    "accessibility_notes",
                    models.TextField(
                        blank=True,
                        help_text="Informationen zur Barrierefreiheit",
                        verbose_name="Barrierefreiheit",
                    ),
                ),
                (
                    "parking_info",
                    models.TextField(
                        blank=True,
                        help_text="Informationen zu Parkmöglichkeiten",
                        verbose_name="Parkmöglichkeiten",
                    ),
                ),
                (
                    "public_transport_info",
                    models.TextField(
                        blank=True,
                        help_text="Informationen zur öffentlichen Verkehrsanbindung",
                        verbose_name="ÖPNV-Anbindung",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Wurde die Adresse manuell verifiziert?",
                        verbose_name="Verifiziert",
                    ),
                ),
                (
                    "geocoded_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Geocodiert am"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Adresse",
                "verbose_name_plural": "Adressen",
                "ordering": ["city", "street", "house_number"],
            },
        ),
        migrations.CreateModel(
            name="NavigationSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "current_status",
                    models.CharField(
                        choices=[
                            ("preparing", "Vorbereitung"),
                            ("appetizer_travel", "Unterwegs zur Vorspeise"),
                            ("at_appetizer", "Bei der Vorspeise"),
                            ("main_course_travel", "Unterwegs zum Hauptgang"),
                            ("at_main_course", "Beim Hauptgang"),
                            ("dessert_travel", "Unterwegs zur Nachspeise"),
                            ("at_dessert", "Bei der Nachspeise"),
                            ("completed", "Abgeschlossen"),
                            ("cancelled", "Abgebrochen"),
                        ],
                        default="preparing",
                        max_length=20,
                        verbose_name="Aktueller Status",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Gestartet um"
                    ),
                ),
                (
                    "appetizer_arrived_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Vorspeise erreicht um"
                    ),
                ),
                (
                    "main_course_arrived_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Hauptgang erreicht um"
                    ),
                ),
                (
                    "dessert_arrived_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Nachspeise erreicht um"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Abgeschlossen um"
                    ),
                ),
                (
                    "preferred_transport_mode",
                    models.CharField(
                        choices=[
                            ("walking", "Zu Fuß"),
                            ("cycling", "Fahrrad"),
                            ("driving", "Auto"),
                            ("public_transport", "ÖPNV"),
                        ],
                        default="driving",
                        max_length=20,
                        verbose_name="Bevorzugtes Verkehrsmittel",
                    ),
                ),
                (
                    "avoid_tolls",
                    models.BooleanField(default=False, verbose_name="Maut vermeiden"),
                ),
                (
                    "avoid_highways",
                    models.BooleanField(
                        default=False, verbose_name="Autobahn vermeiden"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Notizen des Teams während der Navigation",
                        verbose_name="Notizen",
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Bewertung der Navigation (1-5 Sterne)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Bewertung",
                    ),
                ),
                (
                    "feedback",
                    models.TextField(
                        blank=True,
                        help_text="Feedback zur Navigation",
                        verbose_name="Feedback",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "current_location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="current_sessions",
                        to="navigation.address",
                        verbose_name="Aktuelle Position",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="navigation_sessions",
                        to="events.event",
                        verbose_name="Event",
                    ),
                ),
                (
                    "optimization_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="navigation_sessions",
                        to="optimization.optimizationrun",
                        verbose_name="Optimierungslauf",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="navigation_sessions",
                        to="accounts.team",
                        verbose_name="Team",
                    ),
                ),
            ],
            options={
                "verbose_name": "Navigation-Session",
                "verbose_name_plural": "Navigation-Sessions",
                "ordering": ["-created_at"],
                "unique_together": {("team", "event")},
            },
        ),
        migrations.CreateModel(
            name="LocationUpdate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        decimal_places=8, max_digits=10, verbose_name="Breitengrad"
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        decimal_places=8, max_digits=11, verbose_name="Längengrad"
                    ),
                ),
                (
                    "accuracy_meters",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Genauigkeit (Meter)",
                    ),
                ),
                (
                    "speed_kmh",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Geschwindigkeit (km/h)",
                    ),
                ),
                (
                    "bearing_degrees",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0")),
                            django.core.validators.MaxValueValidator(Decimal("360.0")),
                        ],
                        verbose_name="Richtung (Grad)",
                    ),
                ),
                (
                    "is_moving",
                    models.BooleanField(default=True, verbose_name="In Bewegung"),
                ),
                (
                    "estimated_arrival_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Geschätzte Ankunftszeit"
                    ),
                ),
                (
                    "distance_to_destination",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=8,
                        null=True,
                        verbose_name="Entfernung zum Ziel (km)",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "navigation_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="location_updates",
                        to="navigation.navigationsession",
                        verbose_name="Navigation-Session",
                    ),
                ),
            ],
            options={
                "verbose_name": "Standort-Update",
                "verbose_name_plural": "Standort-Updates",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Route",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transport_mode",
                    models.CharField(
                        choices=[
                            ("walking", "Zu Fuß"),
                            ("cycling", "Fahrrad"),
                            ("driving", "Auto"),
                            ("public_transport", "ÖPNV"),
                        ],
                        default="driving",
                        max_length=20,
                        verbose_name="Verkehrsmittel",
                    ),
                ),
                (
                    "distance_km",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=8,
                        null=True,
                        verbose_name="Entfernung (km)",
                    ),
                ),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Fahrtzeit (Minuten)"
                    ),
                ),
                (
                    "duration_with_traffic_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Fahrtzeit mit Verkehr (Minuten)",
                    ),
                ),
                (
                    "route_geometry",
                    models.JSONField(
                        blank=True,
                        help_text="GeoJSON-Geometrie der Route",
                        null=True,
                        verbose_name="Routen-Geometrie",
                    ),
                ),
                (
                    "turn_by_turn_directions",
                    models.JSONField(
                        blank=True,
                        help_text="Detaillierte Navigationsanweisungen",
                        null=True,
                        verbose_name="Turn-by-Turn Navigation",
                    ),
                ),
                (
                    "routing_service",
                    models.CharField(
                        blank=True,
                        help_text="Verwendeter Routing-Service (z.B. OpenRouteService)",
                        max_length=50,
                        verbose_name="Routing-Service",
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Letzte Aktualisierung"
                    ),
                ),
                (
                    "is_cached",
                    models.BooleanField(
                        default=True,
                        help_text="Ist diese Route gecacht oder live berechnet?",
                        verbose_name="Gecacht",
                    ),
                ),
                (
                    "cache_expires_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Cache läuft ab"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "from_address",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="routes_from",
                        to="navigation.address",
                        verbose_name="Von Adresse",
                    ),
                ),
                (
                    "to_address",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="routes_to",
                        to="navigation.address",
                        verbose_name="Zu Adresse",
                    ),
                ),
            ],
            options={
                "verbose_name": "Route",
                "verbose_name_plural": "Routen",
                "ordering": ["distance_km"],
                "unique_together": {("from_address", "to_address", "transport_mode")},
            },
        ),
    ]
