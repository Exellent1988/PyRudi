# Generated by Django 5.2.5 on 2025-08-25 12:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='E-Mail Adresse')),
                ('phone_number', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Telefonnummer muss im Format: "+499999999" eingegeben werden. Bis zu 15 Zeichen erlaubt.', regex='^\\+?1?\\d{9,15}$')], verbose_name='Telefonnummer')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Geburtsdatum')),
                ('dietary_restrictions', models.TextField(blank=True, help_text='Allergien, Diäten, etc.', verbose_name='Ernährungseinschränkungen')),
                ('emergency_contact', models.CharField(blank=True, max_length=100, verbose_name='Notfallkontakt')),
                ('emergency_phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Telefonnummer muss im Format: "+499999999" eingegeben werden.', regex='^\\+?1?\\d{9,15}$')], verbose_name='Notfall-Telefonnummer')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/', verbose_name='Profilbild')),
                ('is_verified', models.BooleanField(default=False, verbose_name='E-Mail verifiziert')),
                ('privacy_accepted', models.BooleanField(default=False, verbose_name='Datenschutz akzeptiert')),
                ('newsletter_consent', models.BooleanField(default=False, verbose_name='Newsletter-Einverständnis')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Benutzer',
                'verbose_name_plural': 'Benutzer',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Team-Name')),
                ('description', models.TextField(blank=True, help_text='Kurze Beschreibung des Teams', verbose_name='Team-Beschreibung')),
                ('max_members', models.PositiveIntegerField(default=2, help_text='Standard: 2 Personen pro Team', verbose_name='Maximale Mitgliederzahl')),
                ('home_address', models.TextField(help_text='Adresse wo das Team kocht/empfängt', verbose_name='Hausadresse')),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True, verbose_name='Breitengrad')),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True, verbose_name='Längengrad')),
                ('cooking_preferences', models.TextField(blank=True, help_text='Bevorzugte Küche, Spezialitäten, etc.', verbose_name='Koch-Präferenzen')),
                ('kitchen_equipment', models.TextField(blank=True, help_text='Verfügbare Küchengeräte und -ausstattung', verbose_name='Küchenausstattung')),
                ('max_guests', models.PositiveIntegerField(default=6, help_text='Wie viele Gäste können maximal bewirtet werden?', verbose_name='Maximale Gästeanzahl')),
                ('accessibility_notes', models.TextField(blank=True, help_text='Informationen zur Barrierefreiheit der Wohnung', verbose_name='Barrierefreiheit')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktiv')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contact_person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='led_teams', to=settings.AUTH_USER_MODEL, verbose_name='Hauptansprechpartner')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TeamInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='E-Mail Adresse')),
                ('token', models.CharField(max_length=100, unique=True, verbose_name='Einladungs-Token')),
                ('status', models.CharField(choices=[('pending', 'Ausstehend'), ('accepted', 'Angenommen'), ('declined', 'Abgelehnt'), ('expired', 'Abgelaufen')], default='pending', max_length=20, verbose_name='Status')),
                ('message', models.TextField(blank=True, help_text='Persönliche Nachricht an den Eingeladenen', verbose_name='Nachricht')),
                ('expires_at', models.DateTimeField(verbose_name='Läuft ab am')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True, verbose_name='Beantwortet am')),
                ('invited_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_invitations', to=settings.AUTH_USER_MODEL, verbose_name='Eingeladen von')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.team', verbose_name='Team')),
            ],
            options={
                'verbose_name': 'Team-Einladung',
                'verbose_name_plural': 'Team-Einladungen',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TeamMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('leader', 'Team-Leader'), ('member', 'Mitglied'), ('substitute', 'Ersatzmitglied')], default='member', max_length=20, verbose_name='Rolle')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktiv')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.team', verbose_name='Team')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Benutzer')),
            ],
            options={
                'verbose_name': 'Team-Mitgliedschaft',
                'verbose_name_plural': 'Team-Mitgliedschaften',
                'ordering': ['team__name', 'role'],
                'unique_together': {('user', 'team')},
            },
        ),
        migrations.AddField(
            model_name='team',
            name='members',
            field=models.ManyToManyField(through='accounts.TeamMembership', to=settings.AUTH_USER_MODEL, verbose_name='Team-Mitglieder'),
        ),
    ]
