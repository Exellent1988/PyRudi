# Generated by Django 5.2.5 on 2025-08-25 18:33

from django.db import migrations
from django.contrib.auth.hashers import make_password


def create_test_data(apps, schema_editor):
    """Erstellt umfassende Testdaten für Running Dinner Demo"""
    CustomUser = apps.get_model('accounts', 'CustomUser')
    DietaryRestriction = apps.get_model('accounts', 'DietaryRestriction')
    Team = apps.get_model('accounts', 'Team')
    TeamMembership = apps.get_model('accounts', 'TeamMembership')
    Event = apps.get_model('events', 'Event')
    TeamRegistration = apps.get_model('events', 'TeamRegistration')

    from datetime import datetime, timedelta, date
    from django.utils import timezone

    # Hole existierende Allergien
    allergies = {}
    try:
        allergies = {
            'erdnuss': DietaryRestriction.objects.get(name='Erdnussallergie'),
            'lactose': DietaryRestriction.objects.get(name='Laktoseintoleranz'),
            'gluten': DietaryRestriction.objects.get(name='Glutenunverträglichkeit/Zöliakie'),
            'vegetarian': DietaryRestriction.objects.get(name='Vegetarisch'),
            'vegan': DietaryRestriction.objects.get(name='Vegan'),
            'halal': DietaryRestriction.objects.get(name='Halal'),
        }
    except DietaryRestriction.DoesNotExist:
        pass  # Falls Allergien noch nicht existieren

    # Standard-Passwort für alle Test-User
    test_password = make_password('testpass123')

    # 1. Erstelle einen Staff-User (Event-Organisator)
    organizer, created = CustomUser.objects.get_or_create(
        username='organizer',
        defaults={
            'email': 'organizer@runningdinner.de',
            'password': test_password,
            'first_name': 'Max',
            'last_name': 'Organisator',
            'phone_number': '+49 123 456789',
            'is_staff': True,
            'is_verified': True,
            'privacy_accepted': True,
            'emergency_contact': 'Anna Organisator',
            'emergency_phone': '+49 123 456790'
        }
    )

    # 2. Erstelle Mock-User mit verschiedenen Profilen
    mock_users_data = [
        {
            'username': 'anna_muller',
            'email': 'anna.muller@email.de',
            'first_name': 'Anna',
            'last_name': 'Müller',
            'phone_number': '+49 151 1111111',
            'allergies': ['vegetarian'],
            'dietary_notes': 'Seit 5 Jahren Vegetarierin'
        },
        {
            'username': 'tom_schmidt',
            'email': 'tom.schmidt@email.de',
            'first_name': 'Tom',
            'last_name': 'Schmidt',
            'phone_number': '+49 151 2222222',
            'allergies': ['erdnuss'],
            'dietary_notes': 'Schwere Erdnussallergie - bitte sehr aufpassen!'
        },
        {
            'username': 'lisa_weber',
            'email': 'lisa.weber@email.de',
            'first_name': 'Lisa',
            'last_name': 'Weber',
            'phone_number': '+49 151 3333333',
            'allergies': ['lactose', 'gluten'],
            'dietary_notes': 'Laktose- und glutenfrei bitte'
        },
        {
            'username': 'marco_fischer',
            'email': 'marco.fischer@email.de',
            'first_name': 'Marco',
            'last_name': 'Fischer',
            'phone_number': '+49 151 4444444',
            'allergies': ['vegan'],
            'dietary_notes': 'Seit 3 Jahren vegan lebend'
        },
        {
            'username': 'sara_klein',
            'email': 'sara.klein@email.de',
            'first_name': 'Sara',
            'last_name': 'Klein',
            'phone_number': '+49 151 5555555',
            'allergies': ['halal'],
            'dietary_notes': 'Halal-Ernährung'
        },
        {
            'username': 'jan_meyer',
            'email': 'jan.meyer@email.de',
            'first_name': 'Jan',
            'last_name': 'Meyer',
            'phone_number': '+49 151 6666666',
            'allergies': [],
            'dietary_notes': ''
        }
    ]

    # Erstelle alle Mock-User
    created_users = []
    for user_data in mock_users_data:
        user, created = CustomUser.objects.get_or_create(
            username=user_data['username'],
            defaults={
                'email': user_data['email'],
                'password': test_password,
                'first_name': user_data['first_name'],
                'last_name': user_data['last_name'],
                'phone_number': user_data['phone_number'],
                'is_verified': True,
                'privacy_accepted': True,
                'dietary_restrictions': user_data['dietary_notes'],
                'emergency_contact': f"Notfall {user_data['first_name']}",
                'emergency_phone': '+49 123 999999'
            }
        )

        # Füge Allergien hinzu (nur wenn User neu erstellt)
        if created:
            for allergy_key in user_data['allergies']:
                if allergy_key in allergies:
                    user.dietary_restrictions_structured.add(
                        allergies[allergy_key])

        created_users.append(user)

    # 3. Erstelle Teams (3 Teams mit je 2 Personen)
    team_configs = [
        {
            'name': 'Team Gourmets',
            'description': 'Wir lieben gutes Essen und neue Rezepte!',
            'members': [created_users[0], created_users[1]],  # Anna & Tom
            'address': 'Maximilianstraße 12, 80539 München',
            'lat': 48.1398, 'lng': 11.5678,
            'cooking_prefs': 'Internationale Küche, gerne experimentell'
        },
        {
            'name': 'Team Veggie-Power',
            'description': 'Vegetarische und vegane Küche ist unsere Leidenschaft',
            'members': [created_users[2], created_users[3]],  # Lisa & Marco
            'address': 'Schwabing Nord 45, 80799 München',
            'lat': 48.1701, 'lng': 11.5682,
            'cooking_prefs': 'Vegetarisch/Vegan, saisonal und bio'
        },
        {
            'name': 'Team Weltenbummler',
            'description': 'Küche aus aller Welt - von Asien bis Afrika',
            'members': [created_users[4], created_users[5]],  # Sara & Jan
            'address': 'Sendlinger Str. 28, 80331 München',
            'lat': 48.1355, 'lng': 11.5686,
            'cooking_prefs': 'Internationale Spezialitäten'
        }
    ]

    created_teams = []
    for team_config in team_configs:
        # Team erstellen
        team, team_created = Team.objects.get_or_create(
            name=team_config['name'],
            defaults={
                'description': team_config['description'],
                'contact_person': team_config['members'][0],
                'home_address': team_config['address'],
                'latitude': team_config['lat'],
                'longitude': team_config['lng'],
                'max_members': 2,
                'max_guests': 6,
                'cooking_preferences': team_config['cooking_prefs'],
                'is_active': True
            }
        )

        # Team-Mitgliedschaften erstellen (nur wenn Team neu)
        if team_created:
            for i, member in enumerate(team_config['members']):
                TeamMembership.objects.create(
                    user=member,
                    team=team,
                    role='captain' if i == 0 else 'member',
                    is_active=True
                )

        created_teams.append(team)

    # 4. Erstelle Event
    today = date.today()

    event, event_created = Event.objects.get_or_create(
        name='München Running Dinner - Testveranstaltung',
        defaults={
            'description': 'Ein wunderbarer Testabend mit kulinarischen Überraschungen quer durch München. Zum Testen der Anwendung!',
            'organizer': organizer,
            'event_date': today + timedelta(days=21),
            'registration_start': timezone.make_aware(datetime.combine(today - timedelta(days=14), datetime.min.time())),
            'registration_deadline': timezone.make_aware(datetime.combine(today + timedelta(days=14), datetime.min.time())),
            'appetizer_time': datetime.strptime('18:00', '%H:%M').time(),
            'main_course_time': datetime.strptime('20:00', '%H:%M').time(),
            'dessert_time': datetime.strptime('22:00', '%H:%M').time(),
            'city': 'München',
            'max_teams': 15,
            'team_size': 2,
            'groups_per_course': 3,
            'price_per_person': 25.00,
            'max_distance_km': 8.0,
            'status': 'registration_open',
            'is_public': True
        }
    )

    # 5. Team-Anmeldungen für Event
    if event_created:
        registration_configs = [
            {'team': created_teams[0], 'status': 'confirmed',
                'preferred_course': 'appetizer'},
            {'team': created_teams[1], 'status': 'confirmed',
                'preferred_course': 'main_course'},
            {'team': created_teams[2], 'status': 'pending',
                'preferred_course': 'dessert'},
        ]

        for reg_config in registration_configs:
            TeamRegistration.objects.create(
                event=event,
                team=reg_config['team'],
                status=reg_config['status'],
                preferred_course=reg_config['preferred_course'],
                can_host_appetizer=True,
                can_host_main_course=True,
                can_host_dessert=True,
                payment_status='paid' if reg_config['status'] == 'confirmed' else 'pending'
            )


def remove_test_data(apps, schema_editor):
    """Entfernt alle Testdaten (für Rollback)"""
    CustomUser = apps.get_model('accounts', 'CustomUser')
    Team = apps.get_model('accounts', 'Team')
    Event = apps.get_model('events', 'Event')

    # Lösche Test-Events
    Event.objects.filter(name__contains='Testveranstaltung').delete()

    # Lösche Test-Teams
    Team.objects.filter(name__startswith='Team ').delete()

    # Lösche Test-Users
    test_usernames = [
        'organizer', 'anna_muller', 'tom_schmidt', 'lisa_weber', 'marco_fischer',
        'sara_klein', 'jan_meyer'
    ]
    CustomUser.objects.filter(username__in=test_usernames).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0003_auto_20250825_1610"),
        ("events", "0002_alter_event_organizer_eventorganizer_and_more"),
    ]

    operations = [
        migrations.RunPython(
            create_test_data,
            remove_test_data
        ),
    ]
