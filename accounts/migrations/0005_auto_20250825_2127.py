# Generated by Django 5.2.5 on 2025-08-25 19:27

from django.db import migrations
from django.utils import timezone
from datetime import datetime


def create_additional_teams(apps, schema_editor):
    """Erstellt zus√§tzliche Teams und User f√ºr bessere Demo-Daten"""
    CustomUser = apps.get_model('accounts', 'CustomUser')
    Team = apps.get_model('accounts', 'Team')
    TeamMembership = apps.get_model('accounts', 'TeamMembership')
    DietaryRestriction = apps.get_model('accounts', 'DietaryRestriction')
    Event = apps.get_model('events', 'Event')
    TeamRegistration = apps.get_model('events', 'TeamRegistration')

    # Hole Allergien
    allergien = {
        'nuss': DietaryRestriction.objects.filter(name='Nussallergie').first(),
        'gluten': DietaryRestriction.objects.filter(name='Glutenunvertr√§glichkeit').first(),
        'laktose': DietaryRestriction.objects.filter(name='Laktoseintoleranz').first(),
        'veggie': DietaryRestriction.objects.filter(name='Vegetarisch').first(),
        'vegan': DietaryRestriction.objects.filter(name='Vegan').first(),
        'fisch': DietaryRestriction.objects.filter(name='Fischallergie').first(),
    }

    # Neue User und Teams
    additional_teams_data = [
        {
            'team_name': 'Die Kochprofis',
            'users': [
                {'username': 'michael_koch', 'first_name': 'Michael',
                    'last_name': 'Koch', 'email': 'michael.koch@email.de', 'allergies': []},
                {'username': 'nina_bauer', 'first_name': 'Nina', 'last_name': 'Bauer',
                    'email': 'nina.bauer@email.de', 'allergies': ['veggie']},
            ],
            'address': 'Leopoldstra√üe 45, 80802 M√ºnchen'
        },
        {
            'team_name': 'Schlemmer-Duo',
            'users': [
                {'username': 'felix_gross', 'first_name': 'Felix', 'last_name': 'Gro√ü',
                    'email': 'felix.gross@email.de', 'allergies': ['gluten']},
                {'username': 'clara_wolf', 'first_name': 'Clara', 'last_name': 'Wolf',
                    'email': 'clara.wolf@email.de', 'allergies': ['laktose']},
            ],
            'address': 'Maximilianstra√üe 12, 80539 M√ºnchen'
        },
        {
            'team_name': 'Genuss-Freunde',
            'users': [
                {'username': 'david_schneider', 'first_name': 'David', 'last_name': 'Schneider',
                    'email': 'david.schneider@email.de', 'allergies': []},
                {'username': 'emma_richter', 'first_name': 'Emma', 'last_name': 'Richter',
                    'email': 'emma.richter@email.de', 'allergies': ['nuss']},
            ],
            'address': 'Sendlinger Stra√üe 28, 80331 M√ºnchen'
        },
        {
            'team_name': 'Feinschmecker',
            'users': [
                {'username': 'lucas_hoffmann', 'first_name': 'Lucas', 'last_name': 'Hoffmann',
                    'email': 'lucas.hoffmann@email.de', 'allergies': ['vegan']},
                {'username': 'mia_wagner', 'first_name': 'Mia', 'last_name': 'Wagner',
                    'email': 'mia.wagner@email.de', 'allergies': []},
            ],
            'address': 'Rosenheimer Stra√üe 143, 81671 M√ºnchen'
        },
        {
            'team_name': 'K√ºchen-Chaos',
            'users': [
                {'username': 'jonas_mueller', 'first_name': 'Jonas', 'last_name': 'M√ºller',
                    'email': 'jonas.mueller@email.de', 'allergies': ['fisch']},
                {'username': 'lena_huber', 'first_name': 'Lena', 'last_name': 'Huber',
                    'email': 'lena.huber@email.de', 'allergies': []},
            ],
            'address': 'Isarring 26, 81539 M√ºnchen'
        },
        {
            'team_name': 'Gaumen-Freude',
            'users': [
                {'username': 'tim_lehmann', 'first_name': 'Tim', 'last_name': 'Lehmann',
                    'email': 'tim.lehmann@email.de', 'allergies': []},
                {'username': 'anna_schulz', 'first_name': 'Anna', 'last_name': 'Schulz',
                    'email': 'anna.schulz@email.de', 'allergies': ['gluten', 'laktose']},
            ],
            'address': 'Theresienstra√üe 88, 80333 M√ºnchen'
        },
        {
            'team_name': 'Koch-K√∂nige',
            'users': [
                {'username': 'paul_martin', 'first_name': 'Paul', 'last_name': 'Martin',
                    'email': 'paul.martin@email.de', 'allergies': ['veggie']},
                {'username': 'sophie_peters', 'first_name': 'Sophie', 'last_name': 'Peters',
                    'email': 'sophie.peters@email.de', 'allergies': []},
            ],
            'address': 'Augustenstra√üe 102, 80798 M√ºnchen'
        },
        {
            'team_name': 'Dinner-Detectives',
            'users': [
                {'username': 'robin_anderson', 'first_name': 'Robin', 'last_name': 'Anderson',
                    'email': 'robin.anderson@email.de', 'allergies': ['nuss', 'fisch']},
                {'username': 'lea_braun', 'first_name': 'Lea', 'last_name': 'Braun',
                    'email': 'lea.braun@email.de', 'allergies': []},
            ],
            'address': 'Goethestra√üe 31, 80336 M√ºnchen'
        },
        {
            'team_name': 'Hunger-Heroes',
            'users': [
                {'username': 'noah_zimmermann', 'first_name': 'Noah', 'last_name': 'Zimmermann',
                    'email': 'noah.zimmermann@email.de', 'allergies': []},
                {'username': 'julia_neumann', 'first_name': 'Julia', 'last_name': 'Neumann',
                    'email': 'julia.neumann@email.de', 'allergies': ['vegan']},
            ],
            'address': 'Prinzregentenstra√üe 75, 81675 M√ºnchen'
        }
    ]

    created_teams = []

    # Erstelle Teams
    for team_data in additional_teams_data:
        # Erstelle User
        team_users = []
        for user_data in team_data['users']:
            user = CustomUser.objects.create_user(
                username=user_data['username'],
                email=user_data['email'],
                password='testpass123',  # Passwort direkt bei create_user setzen
                first_name=user_data['first_name'],
                last_name=user_data['last_name'],
                phone_number=f'+49 151 {user_data["username"][-8:].upper()[:8]}',
                date_of_birth=timezone.make_aware(datetime(1990, 1, 1)).date(),
                dietary_restrictions=f'Individuelle Notizen f√ºr {user_data["first_name"]}',
                emergency_contact=f'{user_data["first_name"]} Notfall',
                emergency_phone='+49 151 NOTFALL',
                is_active=True
            )

            # F√ºge Allergien hinzu
            for allergy_key in user_data['allergies']:
                if allergien[allergy_key]:
                    user.dietary_restrictions_structured.add(
                        allergien[allergy_key])

            team_users.append(user)

        # Erstelle Team (contact_person ist der erste User)
        team = Team.objects.create(
            name=team_data['team_name'],
            description=f'Ein motiviertes Team aus M√ºnchen - {team_data["team_name"]}',
            home_address=team_data['address'],
            max_members=2,
            # Erster User ist Hauptansprechpartner
            contact_person=team_users[0],
            is_active=True
        )

        # F√ºge User zu Team hinzu
        for user in team_users:
            TeamMembership.objects.create(
                user=user,
                team=team,
                role='leader' if user == team_users[0] else 'member',
                is_active=True,
                joined_at=timezone.now()
            )

        created_teams.append(team)
        print(
            f'‚úÖ Team "{team.name}" erstellt mit {len(team_users)} Mitgliedern')

    # Registriere alle neuen Teams f√ºr das Test-Event
    test_event = Event.objects.filter(name__icontains='M√ºnchen').first()
    if test_event:
        for team in created_teams:
            # Verschiedene Hosting-Pr√§ferenzen zuweisen
            hosting_preferences = [
                {'preferred_course': 'appetizer', 'can_host_appetizer': True,
                    'can_host_main_course': True, 'can_host_dessert': False},
                {'preferred_course': 'main_course', 'can_host_appetizer': False,
                    'can_host_main_course': True, 'can_host_dessert': True},
                {'preferred_course': 'dessert', 'can_host_appetizer': True,
                    'can_host_main_course': False, 'can_host_dessert': True},
                {'preferred_course': 'main_course', 'can_host_appetizer': True,
                    'can_host_main_course': True, 'can_host_dessert': True},
            ]

            idx = created_teams.index(team)
            prefs = hosting_preferences[idx % len(hosting_preferences)]

            registration = TeamRegistration.objects.create(
                event=test_event,
                team=team,
                registered_at=timezone.now(),
                status='confirmed',  # Direkt best√§tigt f√ºr Demo
                preferred_course=prefs['preferred_course'],
                can_host_appetizer=prefs['can_host_appetizer'],
                can_host_main_course=prefs['can_host_main_course'],
                can_host_dessert=prefs['can_host_dessert'],
                payment_status='completed'
            )
            print(
                f'‚úÖ Team "{team.name}" f√ºr Event registriert (Status: confirmed)')

    print(f'\nüéâ {len(created_teams)} zus√§tzliche Teams erstellt!')
    print(
        f'üìä Gesamt-Teams im Event: {TeamRegistration.objects.filter(event=test_event, status="confirmed").count() if test_event else "Event nicht gefunden"}')


def remove_additional_teams(apps, schema_editor):
    """Rollback - entfernt die zus√§tzlichen Teams"""
    CustomUser = apps.get_model('accounts', 'CustomUser')
    Team = apps.get_model('accounts', 'Team')

    # L√∂sche User (Teams werden durch CASCADE gel√∂scht)
    additional_usernames = [
        'michael_koch', 'nina_bauer', 'felix_gross', 'clara_wolf',
        'david_schneider', 'emma_richter', 'lucas_hoffmann', 'mia_wagner',
        'jonas_mueller', 'lena_huber', 'tim_lehmann', 'anna_schulz',
        'paul_martin', 'sophie_peters', 'robin_anderson', 'lea_braun',
        'noah_zimmermann', 'julia_neumann'
    ]

    deleted_users = CustomUser.objects.filter(
        username__in=additional_usernames).delete()
    print(f'üóëÔ∏è {deleted_users[0]} User und zugeh√∂rige Teams gel√∂scht')


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0004_auto_20250825_2033"),
        # Stelle sicher, dass Event-Modell verf√ºgbar ist
        ("events", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(create_additional_teams, remove_additional_teams),
    ]
