# Generated by Django 5.2.5 on 2025-08-25 13:30

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0001_initial"),
        ("events", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="OptimizationRun",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Wartend"),
                            ("running", "Läuft"),
                            ("completed", "Abgeschlossen"),
                            ("failed", "Fehlgeschlagen"),
                            ("cancelled", "Abgebrochen"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "max_distance_weight",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.4"),
                        help_text="Gewichtung für Entfernungsminimierung (0.0-1.0)",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0")),
                            django.core.validators.MaxValueValidator(Decimal("1.0")),
                        ],
                        verbose_name="Entfernung Gewichtung",
                    ),
                ),
                (
                    "preference_weight",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.3"),
                        help_text="Gewichtung für Team-Präferenzen (0.0-1.0)",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0")),
                            django.core.validators.MaxValueValidator(Decimal("1.0")),
                        ],
                        verbose_name="Präferenz Gewichtung",
                    ),
                ),
                (
                    "balance_weight",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.3"),
                        help_text="Gewichtung für Kursverteilung (0.0-1.0)",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0")),
                            django.core.validators.MaxValueValidator(Decimal("1.0")),
                        ],
                        verbose_name="Ausgewogenheit Gewichtung",
                    ),
                ),
                (
                    "algorithm",
                    models.CharField(
                        choices=[
                            ("greedy", "Greedy-Algorithmus"),
                            ("genetic", "Genetischer Algorithmus"),
                            ("simulated_annealing", "Simulated Annealing"),
                            ("linear_programming", "Lineare Programmierung"),
                        ],
                        default="genetic",
                        max_length=20,
                        verbose_name="Algorithmus",
                    ),
                ),
                (
                    "max_iterations",
                    models.PositiveIntegerField(
                        default=1000,
                        help_text="Maximale Anzahl Algorithmus-Iterationen",
                        verbose_name="Maximale Iterationen",
                    ),
                ),
                (
                    "time_limit_seconds",
                    models.PositiveIntegerField(
                        default=300,
                        help_text="Maximale Laufzeit der Optimierung",
                        verbose_name="Zeitlimit (Sekunden)",
                    ),
                ),
                (
                    "total_distance",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Gesamtentfernung (km)",
                    ),
                ),
                (
                    "objective_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Gesamtbewertung der Lösung",
                        max_digits=10,
                        null=True,
                        verbose_name="Zielfunktionswert",
                    ),
                ),
                (
                    "iterations_completed",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Durchgeführte Iterationen"
                    ),
                ),
                (
                    "execution_time",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Ausführungszeit (Sekunden)",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Gestartet um"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Abgeschlossen um"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="Fehlermeldung"),
                ),
                (
                    "log_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Detaillierte Algorithmus-Logs",
                        verbose_name="Log-Daten",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="optimization_runs",
                        to="events.event",
                        verbose_name="Event",
                    ),
                ),
            ],
            options={
                "verbose_name": "Optimierungslauf",
                "verbose_name_plural": "Optimierungsläufe",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OptimizationConstraint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "constraint_type",
                    models.CharField(
                        choices=[
                            ("team_separation", "Team-Trennung"),
                            ("team_grouping", "Team-Gruppierung"),
                            ("dietary_restriction", "Diäteinschränkung"),
                            ("accessibility", "Barrierefreiheit"),
                            ("distance_limit", "Entfernungslimit"),
                            ("hosting_preference", "Hosting-Präferenz"),
                        ],
                        max_length=30,
                        verbose_name="Constraint-Typ",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Beschreibung"),
                ),
                (
                    "is_hard_constraint",
                    models.BooleanField(
                        default=True,
                        help_text="Muss erfüllt werden (true) oder ist nur Präferenz (false)",
                        verbose_name="Harte Einschränkung",
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("1.00"),
                        help_text="Gewichtung bei weichen Einschränkungen",
                        max_digits=5,
                        verbose_name="Gewichtung",
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(
                        default=dict,
                        help_text="Constraint-spezifische Parameter",
                        verbose_name="Parameter",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Aktiv")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "optimization_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="constraints",
                        to="optimization.optimizationrun",
                        verbose_name="Optimierungslauf",
                    ),
                ),
            ],
            options={
                "verbose_name": "Optimierungs-Constraint",
                "verbose_name_plural": "Optimierungs-Constraints",
                "ordering": ["constraint_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="TeamAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "course",
                    models.CharField(
                        choices=[
                            ("appetizer", "Vorspeise"),
                            ("main_course", "Hauptgang"),
                            ("dessert", "Nachspeise"),
                        ],
                        max_length=20,
                        verbose_name="Kurs",
                    ),
                ),
                (
                    "distance_to_appetizer",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="Entfernung zur Vorspeise (km)",
                    ),
                ),
                (
                    "distance_to_main_course",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="Entfernung zum Hauptgang (km)",
                    ),
                ),
                (
                    "distance_to_dessert",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="Entfernung zur Nachspeise (km)",
                    ),
                ),
                (
                    "total_distance",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="Gesamtentfernung (km)",
                    ),
                ),
                (
                    "preference_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Bewertung wie gut Präferenzen erfüllt wurden",
                        max_digits=5,
                        null=True,
                        verbose_name="Präferenz-Score",
                    ),
                ),
                (
                    "constraint_violations",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Liste der verletzten Einschränkungen",
                        verbose_name="Constraint-Verletzungen",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "guests",
                    models.ManyToManyField(
                        blank=True,
                        related_name="guest_assignments",
                        to="accounts.team",
                        verbose_name="Gäste",
                    ),
                ),
                (
                    "hosts_appetizer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hosted_appetizer_assignments",
                        to="accounts.team",
                        verbose_name="Vorspeise bei",
                    ),
                ),
                (
                    "hosts_dessert",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hosted_dessert_assignments",
                        to="accounts.team",
                        verbose_name="Nachspeise bei",
                    ),
                ),
                (
                    "hosts_main_course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hosted_main_course_assignments",
                        to="accounts.team",
                        verbose_name="Hauptgang bei",
                    ),
                ),
                (
                    "optimization_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_assignments",
                        to="optimization.optimizationrun",
                        verbose_name="Optimierungslauf",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to="accounts.team",
                        verbose_name="Team",
                    ),
                ),
            ],
            options={
                "verbose_name": "Team-Zuweisung",
                "verbose_name_plural": "Team-Zuweisungen",
                "ordering": ["team__name"],
                "unique_together": {("optimization_run", "team")},
            },
        ),
    ]
